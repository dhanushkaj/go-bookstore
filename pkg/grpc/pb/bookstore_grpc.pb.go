// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: bookstore.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookManagementClient is the client API for BookManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookManagementClient interface {
	CreateBook(ctx context.Context, in *NewBook, opts ...grpc.CallOption) (*Book, error)
	GetBooks(ctx context.Context, in *GetBooksParams, opts ...grpc.CallOption) (*BooksList, error)
}

type bookManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewBookManagementClient(cc grpc.ClientConnInterface) BookManagementClient {
	return &bookManagementClient{cc}
}

func (c *bookManagementClient) CreateBook(ctx context.Context, in *NewBook, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/grpc.BookManagement/CreateBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookManagementClient) GetBooks(ctx context.Context, in *GetBooksParams, opts ...grpc.CallOption) (*BooksList, error) {
	out := new(BooksList)
	err := c.cc.Invoke(ctx, "/grpc.BookManagement/getBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookManagementServer is the server API for BookManagement service.
// All implementations should embed UnimplementedBookManagementServer
// for forward compatibility
type BookManagementServer interface {
	CreateBook(context.Context, *NewBook) (*Book, error)
	GetBooks(context.Context, *GetBooksParams) (*BooksList, error)
}

// UnimplementedBookManagementServer should be embedded to have forward compatible implementations.
type UnimplementedBookManagementServer struct {
}

func (UnimplementedBookManagementServer) CreateBook(context.Context, *NewBook) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBook not implemented")
}
func (UnimplementedBookManagementServer) GetBooks(context.Context, *GetBooksParams) (*BooksList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooks not implemented")
}

// UnsafeBookManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookManagementServer will
// result in compilation errors.
type UnsafeBookManagementServer interface {
	mustEmbedUnimplementedBookManagementServer()
}

func RegisterBookManagementServer(s grpc.ServiceRegistrar, srv BookManagementServer) {
	s.RegisterService(&BookManagement_ServiceDesc, srv)
}

func _BookManagement_CreateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewBook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookManagementServer).CreateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.BookManagement/CreateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookManagementServer).CreateBook(ctx, req.(*NewBook))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookManagement_GetBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBooksParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookManagementServer).GetBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.BookManagement/getBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookManagementServer).GetBooks(ctx, req.(*GetBooksParams))
	}
	return interceptor(ctx, in, info, handler)
}

// BookManagement_ServiceDesc is the grpc.ServiceDesc for BookManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.BookManagement",
	HandlerType: (*BookManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBook",
			Handler:    _BookManagement_CreateBook_Handler,
		},
		{
			MethodName: "getBooks",
			Handler:    _BookManagement_GetBooks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bookstore.proto",
}
